线程

    标识
        pthread_t pthread_self(void);			  // 获取线程ID
	int pthread_equal(pthread_t t1, pthread_t t2);    // 比较

    创建
        int pthread_create(pthread_t *thread, const pthread_attr_t *attr,
                          void *(*start_routine) (void *), void *arg);

    终止
        终止方式
            逻辑执行完，自然返回
	    线程退出
                void pthread_exit(void *retval);
	    线程被其他线程取消
                int pthread_cancel(pthread_t thread);

	清理处理程序
	    void pthread_cleanup_push(void (*routine)(void *),
                                      void *arg);
            void pthread_cleanup_pop(int execute);

	获取终止状态
	    int pthread_join(pthread_t thread, void **retval);
	线程分离
	    int pthread_detach(pthread_t thread); 		// 线程退出后, 资源立即释放


    同步
        互斥锁
           int pthread_mutex_init(pthread_mutex_t *restrict mutex,		// 初始化
                                  const pthread_mutexattr_t *restrict attr);
           pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;

           int pthread_mutex_lock(pthread_mutex_t *mutex);			// 获取锁
           int pthread_mutex_trylock(pthread_mutex_t *mutex);
	   int pthread_mutex_timedlock(pthread_mutex_t *restrict mutex,
                                       const struct timespec *restrict abstime);
           int pthread_mutex_unlock(pthread_mutex_t *mutex);

           int pthread_mutex_destroy(pthread_mutex_t *mutex);                   // 销毁



	读写锁
	    int pthread_rwlock_init(pthread_rwlock_t *restrict rwlock,i         // 初始化
		                    const pthread_rwlockattr_t *restrict attr);
            pthread_rwlock_t rwlock = PTHREAD_RWLOCK_INITIALIZER;

            int pthread_rwlock_rdlock(pthread_rwlock_t *rwlock);
            int pthread_rwlock_tryrdlock(pthread_rwlock_t *rwlock);
            int pthread_rwlock_timedrdlock(pthread_rwlock_t *restrict rwlock,
                                           const struct timespec *restrict abstime);
            int pthread_rwlock_wrlock(pthread_rwlock_t *rwlock);
	    int pthread_rwlock_trywrlock(pthread_rwlock_t *rwlock);
	    int pthread_rwlock_timedwrlock(pthread_rwlock_t *restrict rwlock,
                                           const struct timespec *restrict abstime);
            int pthread_rwlock_unlock(pthread_rwlock_t *rwlock); 


	    int pthread_rwlock_destroy(pthread_rwlock_t *rwlock);		// 销毁

	自旋锁
	    int pthread_spin_init(pthread_spinlock_t *lock, int pshared);	// 初始化

	    int pthread_spin_lock(pthread_spinlock_t *lock);			// 获取锁
            int pthread_spin_trylock(pthread_spinlock_t *lock);
            int pthread_spin_unlock(pthread_spinlock_t *lock);

            int pthread_spin_destroy(pthread_spinlock_t *lock);                 // 销毁


	条件变量
            int pthread_cond_init(pthread_cond_t *restrict cond,		// 初始化
                                  const pthread_condattr_t *restrict attr);
            pthread_cond_t cond = PTHREAD_COND_INITIALIZER;                   

	    int pthread_cond_timedwait(pthread_cond_t *restrict cond,		// 等待条件发生
                                       pthread_mutex_t *restrict mutex,
                                       const struct timespec *restrict abstime);
            int pthread_cond_wait(pthread_cond_t *restrict cond,
                                  pthread_mutex_t *restrict mutex); 

            int pthread_cond_signal(pthread_cond_t *cond);		       // 发信号给等待线程
            int pthread_cond_broadcast(pthread_cond_t *cond);

	    int pthread_cond_destroy(pthread_cond_t *cond);                    // 销毁

	屏障

线程控制
